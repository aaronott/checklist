// var apppath  = app.getPath('appData') + "/" + app.getName() + "/session";
var apppath  = app.getPath('appData');
var Datastore = require('nedb')
  , db = new Datastore({ filename: apppath + '/datafile', autoload: true });

function saveData(type, data) {
  console.log("t:" + type)
  console.log(data)
  console.log("saving Data")
  if (type == 'image') {
    saveFile(data)
  }
}

function saveFile(data) {

  var section_name = data.section;
  var images = [];
  for (var i in data.files) {

    images.push( { type: 'image'
                  , path: data.files[i]
                  , thumbnail: 'possible/thumbs'
                  , comment: ''
                  , section: section_name
                } );

  }

  db.insert(images, function (err, newDocs) {
    console.log(err)
    console.log(newDocs)
  // Two documents were inserted in the database
  // newDocs is an array with these documents, augmented with their _id
  });
}

function saveText(section, text) {

}

function deleteFile(id) {
  db.findOne({ _id: id }, function (err, doc){
    fs.unlink(doc.path, function(){
      console.log(doc.path + " has been removed.")
    });
  });
  db.remove({ _id: id }, function (err, numRemoved){
    if (err !== null) {
      console.log(err)
    }

    // destroy the image.
    var deleted = document.getElementById("image-" + id);
    deleted.remove();
  });

}

function fetchFileBySection(section) {
  db.find({ section: section.id }, function (err, docs) {

    if (err == null) {
      var container_class = "file_container-" + section.id;
      var file_container = '';
      var fc = document.querySelectorAll('.' + container_class);
      if (fc.length !== 0) {
        file_container = fc[0];
      }
      else {
        file_container = document.createElement("DIV");
        file_container.className = "file_container-" + section.id;
      }

      //console.log(file_container);

      // clear it out so when we reload, we don't have duplicates
      while (file_container.hasChildNodes()) {
        file_container.removeChild(file_container.lastChild);
      }


      for (var i in docs) {
        var imageSpan = document.createElement("SPAN");
        imageSpan.id = "image-" + docs[i]._id;

        var image = document.createElement("IMG");
        image.src = docs[i].path;
        image.className = "screenshot-thumbnail";
        image.setAttribute("data-id", docs[i]._id);
        image.setAttribute("data-comment", docs[i].comment);
        imageSpan.appendChild(image);

        var delete_link = document.createElement("A");
        var delete_text = document.createTextNode("delete");
        delete_link.className = "delete-link";
        delete_link.id = docs[i]._id;
        delete_link.href = "#delete";
        delete_link.setAttribute("onclick", "deleteFile(this.id)");
        delete_link.appendChild(delete_text);

        imageSpan.appendChild(delete_link);

        file_container.appendChild(imageSpan);
      }

      section.parentElement.insertBefore(file_container, section);

    }
  });
}


function randid(len)
{
    if (len < 1) { return ''; }
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for( var i=0; i < len; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}


/**
 * Save all the details for this session in a zip'd file. All details will include:
 *  - content directory
 *  - template directory
 *  - screenshots directory
 *  - database file
 */
function persistSession() {
  var content_directory = '';
  var template_directory = '';
  var screenshot_directory = '';
  var database_file = '';

  var apppath  = app.getPath('appData') + "/" + app.getName();
  console.log("apppath from persist: " + apppath);
}

function exportContent() {
  var directory = session_name;
}

//document.getElementById('container').addEventListener('containerLoad', loadSection, false);

/**
var doc = { hello: 'world'
             , n: 5
             , today: new Date()
             , nedbIsAwesome: true
             , notthere: null
             , notToBeSaved: undefined  // Will not be saved
             , fruits: [ 'apple', 'orange', 'pear' ]
             , infos: { name: 'nedb' }
             };

db.insert(doc, function (err, newDoc) {   // Callback is optional
  // newDoc is the newly inserted document, including its _id
  // newDoc has no key called notToBeSaved since its value was undefined
});
**/

// Set a couple save points here.
// Save images when dropped

// var image = { type: 'image'
//               , path: 'path/to/file'
//               , thumbnail: 'possible/thumbs'
//               , comment: 'Big long comment here'
//               , section: 'section this image belongs to'
//             };

// var text = { type: 'text'
//               , comment: 'big long text for this'
//               , section: 'section this belongs to'
//             };
